// Generated by CoffeeScript 1.7.1
var camera, controls, createCube, height, mediumCube, render, renderer, scene, smallCube, width;

scene = new THREE.Scene();

camera = new THREE.PerspectiveCamera(25, window.innerWidth / window.innerHeight, 0.1, 1000);

width = 10;

height = 10 * window.innerHeight / window.innerWidth;

camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);

controls = new THREE.TrackballControls(camera);

controls.rotateSpeed = 5;

controls.noZoom = true;

controls.noPan = true;

controls.dynamicDampingFactor = 0.1;

camera.position.x = 10;

camera.position.y = 10;

camera.position.z = 10;

renderer = new THREE.WebGLRenderer();

renderer.setSize(window.innerWidth, window.innerHeight);

document.body.appendChild(renderer.domElement);

createCube = function(size) {
  var cube, face, geometry, i, material, x_color, y_color, z_color, _i, _len, _ref;
  geometry = new THREE.BoxGeometry(size, size, size);
  x_color = 0xf7c30f;
  y_color = 0xe0a800;
  z_color = 0xffec52;
  _ref = geometry.faces;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    face = _ref[i];
    switch (false) {
      case !((0 <= i && i < 4)):
        face.color.setHex(x_color);
        break;
      case !((4 <= i && i < 8)):
        face.color.setHex(y_color);
        break;
      case !((8 <= i && i < 12)):
        face.color.setHex(z_color);
    }
  }
  material = new THREE.MeshBasicMaterial({
    color: 0xffffff,
    vertexColors: THREE.FaceColors
  });
  cube = new THREE.Mesh(geometry, material);
  return cube;
};

scene.add(createCube(1));

mediumCube = createCube(0.6);

mediumCube.rotateOnAxis(new THREE.Vector3(1, 1, 1).normalize(), 3 * Math.PI / 3);

mediumCube.position.x = 0.8;

mediumCube.position.y = 0.8;

mediumCube.position.z = 0.8;

scene.add(mediumCube);

smallCube = createCube(0.4);

smallCube.position.x = 1.3;

smallCube.position.y = 1.3;

smallCube.position.z = 1.3;

scene.add(smallCube);

render = function(t) {
  controls.update();
  requestAnimationFrame(render);
  return renderer.render(scene, camera);
};

requestAnimationFrame(render);
